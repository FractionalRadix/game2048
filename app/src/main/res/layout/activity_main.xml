<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <!-- TODO~ Use a ConstraintLayout Flow helper to make the chains?
        I could at least use them for the Button bar.
        -->
    <!-- Removed:         style="?android:attr/buttonBarStyle" -->
    <LinearLayout
        android:id="@+id/buttonPanel"
        android:orientation="horizontal"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:gravity="center"
        app:layout_constraintTop_toTopOf="parent">

        <!-- Removed: style="?android:attr/buttonBarStyle" -->
        <ImageButton
            android:id="@+id/newGameButton"
            android:src="@drawable/baseline_clear_24"
            android:contentDescription="@string/new_game"

            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
        />
        <ImageButton
            android:id="@+id/Load"
            android:src="@drawable/baseline_open_in_new_24"
            android:contentDescription="@string/load"

            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
        />
        <ImageButton
            android:id="@+id/Save"
            android:src="@drawable/baseline_save_24"
            android:contentDescription="@string/save"

            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
        />
        <ImageButton
            android:id="@+id/Undo"
            android:src="@drawable/baseline_undo_24"
            android:contentDescription="@string/undo"

            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
        />
        <ImageButton
            android:id="@+id/Redo"
            android:src="@drawable/baseline_redo_24"
            android:contentDescription="@string/redo"

            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
        />
        <ImageButton
            android:id="@+id/Share"
            android:src="@drawable/baseline_share_24"
            android:contentDescription="@string/share"

            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
        />
    </LinearLayout>

    <!-- Top row: just the "Up" button. -->
    <ImageButton
        android:id="@+id/upButton"
        android:src="@drawable/outline_arrow_upward_24"
        android:contentDescription="@string/up"

        android:layout_width="wrap_content"
        android:layout_height="wrap_content"

        app:layout_constraintTop_toBottomOf="@id/buttonPanel"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
    />

    <!-- Middle row: the "left" button, the GameBoardView, and the "right" button. -->
    <!-- Using ConstraintLayout "chains" to center the elements.
        I wonder if these elements can be a member of a horizontal AND a vertical chain at the same time?
        (Should try that out next time!)
        Also: must check circle layout: layout_constraintCircle, layout_constraintCircleRadius, layout_constraintCircleAngle.
    -->

    <ImageButton
        android:id="@+id/leftButton"
        android:src="@drawable/outline_arrow_back_24"
        android:contentDescription="@string/left"

        android:layout_width="wrap_content"
        android:layout_height="wrap_content"

        app:layout_constraintTop_toBottomOf="@id/upButton"
        app:layout_constraintBottom_toTopOf="@id/downButton"

        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toStartOf="@id/gameBoardView"
    />

    <!-- TODO?~ See if we can use relative layout_width and layout_height, instead of absolute values.
      So far, that has lead to the layout being as large as the screen, whether we used match_parent or wrap_content.
      There should be a way to tell Android what the content size is. (And scale it to screen size, while we're at it).
      Check `onMeasure`.
      -->
    <com.cormontia.android.game2048.GameBoardView
        android:id="@+id/gameBoardView"
        android:layout_width="200dp"
        android:layout_height="200dp"

        app:layout_constraintTop_toBottomOf="@id/upButton"

        app:layout_constraintStart_toEndOf="@id/leftButton"
        app:layout_constraintEnd_toStartOf="@id/rightButton"
        app:layout_constraintHorizontal_chainStyle="spread"
    /> <!-- Maybe I should use spread_inside" instead of "spread"... -->

    <ImageButton
        android:id="@+id/rightButton"
        android:src="@drawable/outline_arrow_forward_24"
        android:contentDescription="@string/right"

        android:layout_width="wrap_content"
        android:layout_height="wrap_content"

        app:layout_constraintTop_toBottomOf="@id/upButton"
        app:layout_constraintBottom_toTopOf="@id/downButton"

        app:layout_constraintStart_toEndOf="@id/gameBoardView"
        app:layout_constraintEnd_toEndOf="parent"
    />

    <!-- Bottom row: just the "Down" button. -->
    <ImageButton
        android:id="@+id/downButton"
        android:src="@drawable/outline_arrow_downward_24"
        android:contentDescription="@string/down"

        android:layout_width="wrap_content"
        android:layout_height="wrap_content"

        app:layout_constraintTop_toBottomOf="@id/gameBoardView"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
    />


</androidx.constraintlayout.widget.ConstraintLayout>